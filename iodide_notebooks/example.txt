%% py

import micropip
micropip.install('openrtdynamics2')
micropip.install('colorama')

from colorama import init,  Fore, Back, Style
import openrtdynamics2.lang as dy

%%


#
# Enter a new system (simulation)
#
system = dy.enter_system('simulation')



# define a function that implements a discrete-time integrator
def eueler_integrator( u : dy.Signal, Ts : float, name : str, initial_state = None):

    yFb = dy.signal()

    i = dy.add( [ yFb, u ], [ 1, Ts ] ).set_name(name + '_i')
    y = dy.delay( i, initial_state ).set_name(name + '_y')

    yFb << y

    return y





baseDatatype = dy.DataTypeFloat64(1) 

# define system inputs
number_of_samples_to_stay_in_A = dy.system_input( baseDatatype ).set_name('number_of_samples_to_stay_in_A')
threshold_for_x_to_leave_B = dy.system_input( baseDatatype ).set_name('threshold_for_x_to_leave_B') * dy.float64(0.1)
U2 = dy.system_input( baseDatatype ).set_name('osc_excitement') * dy.float64(0.1)

# some modification of one input
U = U2 * dy.float64(1.234)
U.set_name("stachmachine_input_U")

with dy.sub_statemachine( "statemachine1" ) as switch:

    with switch.new_subsystem('state_A') as system:

        # implement a dummy system the produces zero values for x and v
        x = dy.float64(0.0).set_name('x_def')
        v = dy.float64(0.0).set_name('v_def')

        counter = dy.counter().set_name('counter')
        timeout = ( counter > number_of_samples_to_stay_in_A ).set_name('timeout')
        next_state = dy.conditional_overwrite(signal=dy.int32(-1), condition=timeout, new_value=1 ).set_name('next_state')

        system.set_switched_outputs([ x, v, counter ], next_state)


    with switch.new_subsystem('state_B') as system:

        # implement a simple spring-mass oscillator: 
        # x is the position, v is the velocity, acc is the acceleration

        # create placeholder symbols for x and v (as they are used before being defined)
        x = dy.signal()
        v = dy.signal()

        acc = dy.add( [ U, v, x ], [ 1, -0.1, -0.1 ] ).set_blockname('acc').set_name('acc')

        # close the feedback loops for x and v
        v << eueler_integrator( acc, Ts=0.1, name="intV", initial_state=-1.0 )
        x << eueler_integrator( v,   Ts=0.1, name="intX" )

        leave_this_state = (x > threshold_for_x_to_leave_B).set_name("leave_this_state")
        next_state = dy.conditional_overwrite(signal=dy.int32(-1), condition=leave_this_state, new_value=0 ).set_name('next_state')

        counter = dy.counter().set_name('counter')

        system.set_switched_outputs([ x, v, counter ], next_state)


# define the outputs
output_x = switch.outputs[0].set_name("ox")
output_v = switch.outputs[1].set_name("ov")
counter = switch.outputs[2].set_name("counter")
state_control = switch.state.set_name('state_control')

# set the outputs of the system
dy.set_primary_outputs([ output_x, output_v, state_control, counter ])

sourcecode, manifest = dy.generate_code(template=dy.TargetWasm())

%% md

Simulation
<div id='simulator_gui_container'>
No simulation loaded
</div>

Sourcecode:

<pre><code class="c++ code" id="sourcecode">...</code></pre>

%% fetch

js: http://localhost:3000/js/ORTD_js_simulator.js
js: https://cdn.jsdelivr.net/npm/@json-editor/json-editor@latest/dist/jsoneditor.min.js
js: https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js
js: https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/highlight.min.js
css: https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/default.min.css

%% js
var manifest = pyodide.pyimport("manifest")
var sourcecode = pyodide.pyimport("sourcecode")

simulator_gui_container = document.getElementById('simulator_gui_container')
compile_service_url = "http://localhost:3000/upload"
secret_token = "1234"

setup_simulation_gui( simulator_gui_container, compile_service_url, secret_token, JSON.stringify( manifest), sourcecode )

%% js
source_code_block = document.getElementById('sourcecode')

source_code_block.innerText = sourcecode

%% js
hljs.initHighlightingOnLoad();
hljs.highlightBlock(source_code_block);  